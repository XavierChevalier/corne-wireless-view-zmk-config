/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include "helper.h"
#include "keymap_french.h"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        MediaLayer {
            bindings = <&mo 3>;
            key-positions = <38 39>;
        };

        AtSymbol {
            bindings = <&kp FR_AT>;
            key-positions = <18 30>;
            layers = <0>;
        };

        EHighAccent {
            bindings = <&kp FR_E_ACUTE>;
            key-positions = <14 3>;
            layers = <0>;
        };

        EGraveAccent {
            bindings = <&kp FR_E_GRAVE>;
            key-positions = <3 16>;
            layers = <0>;
        };

        AGraveAccent {
            bindings = <&kp FR_A_GRAVE>;
            key-positions = <1 2>;
        };

        CCedilla {
            bindings = <&kp FR_C_CEDILLA>;
            key-positions = <27 15>;
        };

        UGraveAccent {
            bindings = <&kp FR_U_GRAVE>;
            key-positions = <7 20>;
        };

        Dash {
            bindings = <&kp FR_MINUS>;
            key-positions = <30 31>;
        };

        CMDCut {
            bindings = <&kp LG(X)>;
            key-positions = <26 27>;
        };

        CMDCopy {
            bindings = <&kp LG(C)>;
            key-positions = <27 28>;
        };

        CMDPaste {
            bindings = <&kp LG(V)>;
            key-positions = <28 29>;
        };

        CMDZ {
            bindings = <&kp LG(Q)>;
            key-positions = <16 17>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E     &kp R      &kp T        &kp Y    &kp U      &kp I      &kp O    &kp P     &kp BACKSPACE
&mo 2             &kp A  &kp S  &kp D     &kp F      &kp G        &kp H    &kp J      &kp K      &kp L    &kp SEMI  &kp SQT
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C     &kp V      &kp B        &kp N    &kp M      &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
                                &kp LGUI  &mo 1      &kp SPACE    &kp RET  &kp LSHFT  &kp RALT
            >;
        };

        lower_layer {
            label = "Lower";
            bindings = <
&kp F1       &kp F2     &kp F3        &kp F4        &kp F5       &kp F6         &kp F7       &kp F8          &kp F9          &kp F10          &kp F11   &kp F12
&kp FR_HASH  &trans     &kp FR_CARET  &kp FR_GRAVE  &kp FR_DQT   &kp FR_APOS    &kp FR_EXCL  &kp PAGE_UP     &kp UP_ARROW    &kp PAGE_DOWN    &kp HOME  &none
&kp FR_LT    &kp FR_GT  &kp FR_LBRC   &kp FR_RBRC   &kp FR_LPAR  &kp FR_RPAR    &kp FR_PIPE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END   &trans
                                      &trans        &trans       &trans         &trans       &trans          &trans
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&none  &none  &kp FR_MICRO  &kp FR_EURO  &kp FR_POUND_SIGN  &kp FR_EQUAL    &kp FR_PLUS   &kp FR_N7  &kp FR_N8  &kp FR_N9  &none  &none
&none  &none  &none         &kp FR_DEG   &kp FR_SLASH       &kp FR_BSLH     &kp FR_MINUS  &kp FR_N4  &kp FR_N5  &kp FR_N6  &none  &none
&none  &none  &none         &none        &kp FR_AMPS        &kp FR_STAR     &kp FR_N0     &kp FR_N1  &kp FR_N2  &kp FR_N3  &none  &none
                            &trans       &trans             &trans          &trans        &trans     &trans
            >;
        };

        media_layer {
            label = "Media";
            bindings = <
&none       &none       &none       &none   &none   &none     &none              &none            &none       &none  &none  &none
&bt BT_CLR  &bt BT_PRV  &bt BT_NXT  &none   &none   &none     &kp C_PLAY_PAUSE   &kp C_PREVIOUS   &kp C_NEXT  &none  &none  &none
&none       &none       &none       &none   &none   &none     &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE  &none  &none  &none
                                    &trans  &trans  &trans    &trans             &trans           &trans
            >;
        };
    };
};
